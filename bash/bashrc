#!/usr/bin/env bash
#
# My personal configuration of Bash. It contains my settings and some useful
# scripts that I use ofter.
#
# This file is called every time a shell is started. It is also called by
# '.bash_profile' only once.
#
# Copyright (c) Emanuele Petriglia <inbox@emanuelepetriglia.com> 2018-2019
# This file is lincensed under the MIT license.

# Bash settings {{{

# Enable auto-completion feature.
if [[ -f "/etc/profile.d/bash_completion.sh" ]]; then
  # shellcheck disable=SC1091
  . /etc/profile.d/bash_completion.sh
fi

# }}}

# Global variables {{{

# Bash prompt.
export PS1="[\u@\h \[\e[36m\]\W\[\e[m\]]\\$ "

# Enable SSH support for gpg-agent.
export SSH_AUTH_SOCK="/run/user/$EUID/gnupg/S.gpg-agent.ssh"

# Default editor.
export EDITOR=vim

export ANDROID_HOME=/home/emanuele/.local/opt/android/
export ANDROID_SDK_ROOT=/home/emanuele/.local/opt/android/
export GRADLE_OPTS="-Dorg.gradle.daemon=false"

# }}}

# Small scripts {{{

# Generates a new journal entry and runs 'vim -c Writing'. Default date is
# current, but you can specify a different one (like '2019-10-27')
jour() {
  local file custom_date

  custom_date="${1:-$(date +%F)}"
  file="$custom_date.md"
  if [[ -f "$file" ]]; then
    echo "File '$file' already exists!" >&2
  else
    echo "$custom_date" > "$file"
    echo "${custom_date//?/=}" >> "$file" # replace each char with '='

    vim -c Writing "$file"
  fi
}

# Prints the closest IPv4 and IPv6 DNS resolvers in the OpenNIC network.
opennic() {
  echo "Closest IPv4 (IP, name and reliability):"
  curl "https://api.opennic.org/geoip/?list&res=4&ipv=4"
  echo
  echo "Closest IPv6 (IP, name and reliability):"
  curl "https://api.opennic.org/geoip/?list&res=4&ipv=6"
  echo
}

# Colorized man pages.
# Thanks to: https://news.ycombinator.com/item?id=12304730
man() {
   LESS_TERMCAP_mb=$(printf "\e[1;31m") \
   LESS_TERMCAP_md=$(printf "\e[1;31m") \
   LESS_TERMCAP_me=$(printf "\e[0m") \
   LESS_TERMCAP_se=$(printf "\e[0m") \
   LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
   LESS_TERMCAP_ue=$(printf "\e[0m") \
   LESS_TERMCAP_us=$(printf "\e[1;32m") \
   command man "$@"
}

# This small script upload the current clipboard content to https://hastebin.com,
# then shows the URL and copy it to the clipboard (erasing the previous
# content).
#
# This script is useful with my xfce4-terminal configuration, that copy all text
# selected to clipboard.
#
# This script requires the following extra commands: curl, xclip.
haste() {
  local endpoint url response

  endpoint="https://hastebin.com/documents"

  if [[ "$(command -v curl)" && "$(command -v xclip)" ]] ; then
    response="$(curl --request POST --silent --data "$(xclip -o)" "$endpoint")"

    # shellcheck disable=SC2181
    if (( $? == 0 )) ; then
      url="$(echo "$response" \
        | awk --field-separator '"' '{ print "https://hastebin.com/"$4 }')"

      echo "$url"

      echo -n "$url" | xclip -selection clipboard \
        || echo "Failed to copy URL to clipboard"
    else
      echo "Failed to upload the clipboard to https://hastebin.com" >&2
    fi

  else
    echo "This script requires curl and xclip to run." >&2
  fi
}

# It prints a sorted list of dreams with filename and dream's title.
list-dreams() {
  # If there are not "*.adoc" documents, do not run the for.
  shopt -s failglob

  gawk -e 'FNR == 1 { sub(".adoc", "", FILENAME); sub("= ", "", $0); printf "%-12s - %s\n", FILENAME, $0 }' -- *.adoc
}

# It converts HEIC image files to JPEG. It requires libheif.
heic2jpg() {
  for image in *.HEIC ; do
    heif-convert "$image" "${image/%.HEIC/.jpg}"
  done
}

# scanned makes a PDF file look scanned using ImageMagick.
scanned() {
  local input output

  input="$1"
  output="$2"

  if [[ "$(command -v convert)" ]] ; then
    # Thanks to: https://gist.github.com/andyrbell/25c8632e15d17c83a54602f6acde2724?permalink_comment_id=3302435#gistcomment-3302435
    convert -density 130 "$input" -rotate 0.33 -attenuate 0.15 \
      +noise Multiplicative -colorspace Gray "$output"
  else
    echo "This script requires ImageMagick." >&2
  fi
}

# }}}

# Bash history {{{

# More human-readable format.
export HISTTIMEFORMAT="[%F %T] "

# Set default hledger journal.
# shellcheck disable=SC2155
export LEDGER_FILE="$HOME/Documents/writing/notebook/finance/current.journal"

# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

# }}}

# Aliases {{{

# It stops Bash to record commands in the current session.
alias forget="unset HISTFILE"

# It downloads videos and then extracts the audio.
alias music-dl='youtube-dl -x --audio-format vorbis'

# It replace spaces to underscore and convert the text in lowercase.
alias renamefull="rename 's/ /_/g' * && rename 'y/A-Z/a-z/' *"

# It normalize images name.
alias renameimages="exiv2 -v -r 'IMG_%Y%m%d_%H%M%S'"

alias py="python3"

# Show all available snippets for VIM.
alias snippets="ls \$HOME/.vim/snippets"
alias snips="snippets"

# Enable colors for varous commands.
alias ls="ls --color=auto"
alias grep="grep --color=auto"
alias tree="tree -C"

# Enable ls aliases.
alias ll="ls -l"
alias la="ls -A"
alias l="ls -CF"

# Run VIM in writing mode (see my .vimrc for more informations).
alias writing="vim -c Writing"

alias ..="cd .."

# Download a website page ('-k': fix local links, '-p' download resources).
alias web-archive="wget -p -k"

# Prints all installed packages that requires the given package.
alias why="rpm -q --whatrequires"

alias p="pass"

# Start Firefox with University Work profile (it must exists before!).
alias university-work="firefox --profile ~/.cache/mozilla/firefox/university-work/"

# }}}

# vim:foldmethod=marker
